---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: ${NAMESPACE}
  labels:
    cluster.metal-stack.io/infrastructure-provider: metal-stack
    cluster.metal-stack.io/cni: calico
spec:
  clusterNetwork:
    pods:
      cidrBlocks: ${POD_CIDR:=["10.240.0.0/12"]}
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-controlplane
    namespace: ${NAMESPACE}
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
    kind: MetalStackCluster
    name: ${CLUSTER_NAME}
    namespace: ${NAMESPACE}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: MetalStackCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: ${NAMESPACE}
spec:
  projectID: ${METAL_PROJECT_ID}
  partition: ${METAL_PARTITION}
  nodeNetworkID: ${METAL_NODE_NETWORK_ID}
  controlPlaneIP: ${CONTROL_PLANE_IP}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: MetalStackMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-controlplane
  namespace: ${NAMESPACE}
spec:
  template:
    spec:
      size: ${CONTROL_PLANE_MACHINE_SIZE}
      image: ${CONTROL_PLANE_MACHINE_IMAGE}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: MetalStackMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-worker
spec:
  template:
    spec:
      size: ${WORKER_MACHINE_SIZE}
      image: ${WORKER_MACHINE_IMAGE}
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: ${CLUSTER_NAME}-controlplane
spec:
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  version: ${KUBERNETES_VERSION}
  machineTemplate:
    nodeDrainTimeout: 10m
    infrastructureRef:
      kind: MetalStackMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      name: ${CLUSTER_NAME}-controlplane
  kubeadmConfigSpec:
    format: ignition
    clusterConfiguration:
      apiServer:
        extraArgs: {}
      controllerManager:
        extraArgs:
          cloud-provider: external
    initConfiguration:
      localAPIEndpoint:
        advertiseAddress: 127.0.0.1
        bindPort: 443
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
    joinConfiguration:
      controlPlane:
        localAPIEndpoint:
          advertiseAddress: 127.0.0.1
          bindPort: 443
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
    files:
      - path: /etc/kubernetes/manifests/kubevip.yaml
        owner: root:root
        permissions: "0644"
        content: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-vip
            namespace: kube-system
          spec:
            containers:
            - args:
              - manager
              env:
              - name: vip_arp
                value: "false"
              - name: port
                value: "443"
              - name: vip_interface
                value: lo
              - name: cp_enable
                value: "true"
              - name: cp_namespace
                value: kube-system
              - name: bgp_enable
                value: "true"
              - name: bgp_routerid
                value: 127.0.0.1
              - name: bgp_as
                value: "METAL_MACHINE_ASN"
              - name: bgp_peeraddress
                value: 127.0.0.1
              - name: bgp_peerpass
              - name: bgp_peeras
                value: "METAL_MACHINE_ASN"
              - name: address
                value: ${CONTROL_PLANE_IP}
              image: ghcr.io/kube-vip/kube-vip:v0.8.10
              imagePullPolicy: IfNotPresent
              name: kube-vip
              resources: {}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - NET_RAW
                  drop:
                  - ALL
              volumeMounts:
              - mountPath: /etc/kubernetes/admin.conf
                name: kubeconfig
            hostAliases:
            - hostnames:
              - kubernetes
              ip: 127.0.0.1
            hostNetwork: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/admin.conf
              name: kubeconfig

---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-0
  labels:
    cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
    nodepool: nodepool-0
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
      nodepool: nodepool-0
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
        nodepool: nodepool-0
    spec:
      nodeDrainTimeout: 120s
      clusterName: ${CLUSTER_NAME}
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: ${CLUSTER_NAME}-md-0
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: ${CLUSTER_NAME}-worker
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: MetalStackMachineTemplate
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  template:
    spec:
      format: ignition
      clusterConfiguration:
        apiServer:
          extraArgs: {}
        controllerManager:
          extraArgs:
            cloud-provider: external
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: ${CLUSTER_NAME}-calico-cni
  namespace: ${NAMESPACE}
spec:
  clusterSelector:
    matchLabels:
      cluster.metal-stack.io/cni: calico
  releaseName: calico
  repoURL: https://docs.tigera.io/calico/charts
  chartName: tigera-operator
  namespace: kube-system
  version: v3.28.3
  valuesTemplate: |
    installation:
      enabled: true

      calicoNetwork:
        bgp: Disabled
        ipPools:
        - name: default-ipv4-ippool
          blockSize: 26
          cidr: 10.240.0.0/12
          encapsulation: None
        mtu: 1440
      cni:
        ipam:
          type: HostLocal
        type: Calico

    goldmane:
      enabled: false

    whisker:
      enabled: false
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: ${CLUSTER_NAME}-metal-ccm
  namespace: ${NAMESPACE}
spec:
  strategy: Reconcile
  clusterSelector:
    matchLabels:
      cluster.metal-stack.io/infrastructure-provider: metal-stack
  resources:
    - name: ${CLUSTER_NAME}-crs-cloud-controller-manager
      kind: ConfigMap
    - name: ${CLUSTER_NAME}-crs-cloud-controller-manager
      kind: Secret
---
apiVersion: v1
kind: Secret
metadata:
  name: ${CLUSTER_NAME}-crs-cloud-controller-manager
  namespace: ${NAMESPACE}
type: addons.cluster.x-k8s.io/resource-set
stringData:
  secret.yaml: |
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: cloud-controller-manager
      namespace: kube-system
    stringData:
      api-url: ${METAL_API_URL}
      api-hmac: ${METAL_API_HMAC}
      api-hmac-auth-type: ${METAL_API_HMAC_AUTH_TYPE}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${CLUSTER_NAME}-crs-cloud-controller-manager
  namespace: ${NAMESPACE}
data:
  deploy.yaml: |
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: cloud-controller-manager
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: cloud-controller-manager
    rules:
      - apiGroups:
          - ""
        resources:
          - events
        verbs:
          - create
          - patch
          - update
      - apiGroups:
          - ""
        resources:
          - nodes
        verbs:
          - "*"
      - apiGroups:
          - ""
        resources:
          - nodes/status
        verbs:
          - patch
      - apiGroups:
          - ""
        resources:
          - services
          - services/status
          - endpoints
        verbs:
          - get
          - list
          - patch
          - update
          - watch
      - apiGroups:
          - ""
        resources:
          - serviceaccounts
          - serviceaccounts/token
        verbs:
          - create
          - get
          - list
          - watch
      - apiGroups:
          - ""
        resources:
          - secrets
          - configmaps
        verbs:
          - get
          - list
          - watch
          - update
          - create
          - patch
          - delete
      - apiGroups:
          - coordination.k8s.io
        resources:
          - leases
        verbs:
          - get
          - create
          - update
      - apiGroups:
          - metallb.io
        resources:
          - bgppeers
        verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
      - apiGroups:
          - metallb.io
        resources:
          - ipaddresspools
        verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
      - apiGroups:
          - metallb.io
        resources:
          - bgpadvertisements
        verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: cloud-controller-manager
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cloud-controller-manager
    subjects:
      - kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: cloud-controller-manager
      name: cloud-controller-manager
      namespace: kube-system
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: cloud-controller-manager
      strategy:
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: cloud-controller-manager
        spec:
          containers:
            - command:
                - ./metal-cloud-controller-manager
                - --cluster-cidr=10.240.0.0/12
                - --cluster-name=
                - --concurrent-service-syncs=10
                - --leader-elect=true
                - --secure-port=10258
                - --use-service-account-credentials
                - --v=2
              env:
                - name: METAL_API_URL
                  valueFrom:
                    secretKeyRef:
                      key: api-url
                      name: cloud-controller-manager
                - name: METAL_AUTH_HMAC
                  valueFrom:
                    secretKeyRef:
                      key: api-hmac
                      name: cloud-controller-manager
                - name: METAL_AUTH_HMAC_AUTH_TYPE
                  valueFrom:
                    secretKeyRef:
                      key: api-hmac-auth-type
                      name: cloud-controller-manager
                - name: METAL_PROJECT_ID
                  value: ${METAL_PROJECT_ID}
                - name: METAL_PARTITION_ID
                  value: ${METAL_PARTITION}
                # associates service type load balancer ips with this cluster:
                - name: METAL_CLUSTER_ID
                  value: ${NAMESPACE}.${CLUSTER_NAME}
                - name: METAL_DEFAULT_EXTERNAL_NETWORK_ID
                  value: internet
                - name: METAL_ADDITIONAL_NETWORKS
                  value: internet,${METAL_NODE_NETWORK_ID}
                - name: METAL_SSH_PUBLICKEY
                  value: ""
              image: ghcr.io/metal-stack/metal-ccm:v0.9.7
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 2
                httpGet:
                  path: /healthz
                  port: 10258
                  scheme: HTTPS
                initialDelaySeconds: 15
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 15
              name: cloud-controller-manager
              resources:
                limits:
                  cpu: 250m
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 64Mi
          nodeSelector:
            node-role.kubernetes.io/control-plane: ""
          hostNetwork: true
          serviceAccountName: cloud-controller-manager
          tolerations:
            - effect: NoSchedule
              operator: Exists
              key: node-role.kubernetes.io/control-plane
            - effect: NoSchedule
              key: node.cloudprovider.kubernetes.io/uninitialized
              value: "true"
          restartPolicy: Always
          volumes:
            - name: cloud-controller-manager
              secret:
                defaultMode: 420
                secretName: cloud-controller-manager